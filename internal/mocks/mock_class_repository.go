// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jilani-go/glofox/internal/repository (interfaces: ClassRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/jilani-go/glofox/internal/models"
)

// MockClassRepository is a mock of ClassRepository interface.
type MockClassRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClassRepositoryMockRecorder
}

// MockClassRepositoryMockRecorder is the mock recorder for MockClassRepository.
type MockClassRepositoryMockRecorder struct {
	mock *MockClassRepository
}

// NewMockClassRepository creates a new mock instance.
func NewMockClassRepository(ctrl *gomock.Controller) *MockClassRepository {
	mock := &MockClassRepository{ctrl: ctrl}
	mock.recorder = &MockClassRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassRepository) EXPECT() *MockClassRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClassRepository) Create(arg0 models.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClassRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClassRepository)(nil).Create), arg0)
}

// GetByID mocks base method.
func (m *MockClassRepository) GetByID(arg0 models.ClassID) (models.Class, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(models.Class)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockClassRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockClassRepository)(nil).GetByID), arg0)
}
